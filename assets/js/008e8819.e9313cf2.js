"use strict";(self.webpackChunkcloud=self.webpackChunkcloud||[]).push([[1620],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=l,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const r={},i=void 0,o={unversionedId:"kube",id:"kube",title:"kube",description:"Go to main page",source:"@site/docs/kube.md",sourceDirName:".",slug:"/kube",permalink:"/cloud/docs/kube",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/kube.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Docker notes",permalink:"/cloud/docs/docker"},next:{title:"Misc (Linux)",permalink:"/cloud/docs/linux/linux_misc"}},p={},s=[{value:"Contents",id:"contents",level:2},{value:"Terms",id:"terms",level:2},{value:"Pods",id:"pods",level:3},{value:"Replica/replica set",id:"replicareplica-set",level:3},{value:"Deploymnet",id:"deploymnet",level:3},{value:"namespace",id:"namespace",level:3},{value:"Context",id:"context",level:3},{value:"service",id:"service",level:3},{value:"Reference",id:"reference",level:2},{value:"Command Reference",id:"command-reference",level:2},{value:"PD",id:"pd",level:3},{value:"Operation",id:"operation",level:3},{value:"yaml examples",id:"yaml-examples",level:2},{value:"Simple",id:"simple",level:3}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.ibm.com/junsulee/c"},"Go to main page")),(0,l.kt)("h1",{id:"kubenetes"},"kubenetes"),(0,l.kt)("p",null,"Kubenetes (aka k8s) .  "),(0,l.kt)("h2",{id:"contents"},"Contents"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#kubenetes"},"kubenetes"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#contents"},"Contents")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#terms"},"Terms"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#pods"},"Pods")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#replicareplica-set"},"Replica/replica set")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#deploymnet"},"Deploymnet")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#namespace"},"namespace")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#context"},"Context")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#service"},"service")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#reference"},"Reference")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#command-reference"},"Command Reference"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#pd"},"PD")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#operation"},"Operation")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#yaml-examples"},"yaml examples"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#simple"},"Simple"))))))),(0,l.kt)("h2",{id:"terms"},"Terms"),(0,l.kt)("h3",{id:"pods"},"Pods"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"K8s is All about managing pods.   "),(0,l.kt)("li",{parentName:"ul"},"Pods in k8 can have one or more containers.",(0,l.kt)("br",{parentName:"li"}),"(Mostly one conatiner. A multi container is an exception.)   "),(0,l.kt)("li",{parentName:"ul"},"In a pod, you can have a volume as well so that files can be stored.    "),(0,l.kt)("li",{parentName:"ul"},"As Pods are not typically started by themselves as naked Pods, there are no good ways to start just a Pod from the command line.",(0,l.kt)("br",{parentName:"li"}),"(Do NOT run naked Pods !)"),(0,l.kt)("li",{parentName:"ul"},"However, Pods can be started from a YAML manifest, using ",(0,l.kt)("inlineCode",{parentName:"li"},"kubectl create -f mypod.yaml"),". ( apiversion, kind, metadata, spec ... )     ")),(0,l.kt)("h3",{id:"replicareplica-set"},"Replica/replica set"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Replicated pods are taking care of redundancy.   "),(0,l.kt)("li",{parentName:"ul"},"Replica set for scailability.",(0,l.kt)("br",{parentName:"li"}),"Replica set also is not something you are going to manage.",(0,l.kt)("br",{parentName:"li"}),"Replica set is something that cares of the replication.   ")),(0,l.kt)("h3",{id:"deploymnet"},"Deploymnet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The deployment is really the applicaton.",(0,l.kt)("br",{parentName:"p"}),"\n","Deployment is responsible for starting replicat set.",(0,l.kt)("br",{parentName:"p"}),"\n","Deployment monitors replicat sets.",(0,l.kt)("br",{parentName:"p"}),"\n","Replica set monitors right amount of pods.",(0,l.kt)("br",{parentName:"p"}),"\n","If anything goes away, k8s restores sets.",(0,l.kt)("br",{parentName:"p"}),"\n","Deployment knows how many replica should be available.",(0,l.kt)("br",{parentName:"p"}),"\n","Deployments are the standard for running applications. In other words, running application in a Deployment is the standard.    ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"K8s resources are stored in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Etcd")," database in JSON format.   "))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Pods/volume -> replica -> replica set -> deployment    ")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Deployment is responsible for starting the replicat set.\nReplica set itself has started to pods.    ")),(0,l.kt)("h3",{id:"namespace"},"namespace"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"provide isolated environments in a k8s env.    "),(0,l.kt)("li",{parentName:"ul"},"Makes sense in env. with multiple teams or projects.    "),(0,l.kt)("li",{parentName:"ul"},"can use resource quota to divide cluster resources between users.   ")),(0,l.kt)("h3",{id:"context"},"Context"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Consists of the clustername and namespace that the current user connects to.      ")),(0,l.kt)("h3",{id:"service"},"service"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Each pod has its own IP address     "),(0,l.kt)("li",{parentName:"ul"},"Service is a kind of LB(Load balancer)     "),(0,l.kt)("li",{parentName:"ul"},"Service is an another api object in K8s.   "),(0,l.kt)("li",{parentName:"ul"},"Service is created referring ",(0,l.kt)("inlineCode",{parentName:"li"},"Label")," to connect a ",(0,l.kt)("inlineCode",{parentName:"li"},"Deployment"),".         "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ingress")," for http, https. and distribute to multiple services.      "),(0,l.kt)("li",{parentName:"ul"},"Types\nClusterIP : The default type; provides internal access only.",(0,l.kt)("br",{parentName:"li"}),"NodePort  : allocate a specific node port which needs to be opened on the firewall.",(0,l.kt)("br",{parentName:"li"}),"LoadBalancer : Currently only implented in public cloud",(0,l.kt)("br",{parentName:"li"}),"ExternalName : a relatively new object that works on DNS names; Redirection is happening at a DNS level.",(0,l.kt)("br",{parentName:"li"}),"Service without selector : use for direct connections based on IP/port, without an endpoint. Useful for DB connection or between namespaces.    ")),(0,l.kt)("h2",{id:"reference"},"Reference"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/home/"},"Kubernetes doc"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://cri-o.io"},"crio")),(0,l.kt)("h2",{id:"command-reference"},"Command Reference"),(0,l.kt)("h3",{id:"pd"},"PD"),(0,l.kt)("p",null,"For further debug and diagnose cluster problems    "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kubectl cluster-info dump \n")),(0,l.kt)("h3",{id:"operation"},"Operation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kubectl create deployment -h  # help\n\nkubectl delete -f lab6_nginx_pod.yaml   # delete by file  \n\n\n# completion setting\nsudo yum install -y bash-completion\nkubectl completion -h\nsource <(kubectl completion bash)\nkubectl completion bash > ~/.kube/completion.bash.inc\n## add the following line to .bash_profile\nsource .kube/completion.bash.inc\n\nkubectl cluster-info\n\nkubectl get all\nkubectl get all -o wide\n\n\nkubectl get nodes  \n\n# pod\nkubectl get pods   # shows currently running Pods\nkubectl get pods <podname> -o yaml\n\nkubectl describe pods\nkubectl describe pod <podname>\nex) kubectl describe deployments.apps rollingnginx\nkubectl delete pod busybox2\n\n# deployment\nkubectl create deployment cmd-nginx --image=nginx # Create. Can't set the # of replica set. To run an application from the command line.  Nicer way.       \n# ngix : web serving, reverse proxying, caching, load balancing, media streaming, and more\n\nkubectl create -f myfile.yaml   #  to run an application from a YAML file    \nkubectl delete -f myfile.yaml\n\nkubectl get <resources> -o yaml > myresource.yaml  #ex) kubectl get pod -o yaml\nkubectl get deployment.apps\nkubectl get deployment.apps -o yaml\n\nkubectl edit deployments.apps <app name>\n\n# api\nkubectl api-resources\nex) kubectl api-resources --api-group=db2u.databases.ibm.com \nkubectl api-versions    \n\n# explain\nkubectl explain pod\nkubectl explain pod.spec\nkubectl explain pod.spec.containers\nex) kubectl explain db2uclusters  \nex) kubectl explain db2uclusters.spec  \nex) kubectl explain db2uclusters.spec.environment  \nkubectl explain deployment.spec.strategy \n\n\n# Namespace\nkubectl get ns\nex) kubectl get all -n kubernetes-dashboard\nkubectl create ns myspace  # create a namespace  \nkubectl get pods --all-namespaces\nkubectl get pods -A    # from all namespaces\nex) current namespace\n[junsulee@fedora kube]$ kubectl config get-contexts\nCURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE\n*         minikube   minikube   minikube   default\n\n\n# scale\nex) kubectl edit deployment cmd-nginx\nex) kubectl scale --replicas=1 deployment cmd-nginx\n\n# rollout\nkubectl rollout history deployment\nex) kubectl rollout history deployment rollingnginx --revision=2\nex) kubectl rollout undo deployment rollingnginx --to-revision=1\n\n# Labels \nkubectl get all --selector app=cmd-nginx    # Display all objects with a specific label\n\nkubectl get all --show-lables\nex) kubectl get all --selector app=db2oltp-1655862364134421\n\n# service\nkubectl expose deployment rollingnginx --port=80 --target-port=80\n\n")),(0,l.kt)("h2",{id:"yaml-examples"},"yaml examples"),(0,l.kt)("h3",{id:"simple"},"Simple"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox2\n  namespace: default\nspec:\n  containers:\n  - name: busy\n    image: busybox\n    command:\n      - sleep\n      - "3600"\n')))}u.isMDXComponent=!0}}]);